name: Deployment
on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    environment: live
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: setup local php
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: curl
          tools: composer

      - name: start maintenance mode
        id: statuspage
        run: |
          composer init --stability="dev"
          composer require "stui/statuspage-io:v0.0.4"
          echo -n "::set-output name=INCIDENT_ID::" && php vendor/bin/statuspage.php maintenance schedule --title "Updating SSO API to newest version" --description $'We\'re updating the SSO API, so we can provide you with new features (and possibly bugs).\r\nAs we\'re using atomic deployments, no interruption should be perceivable.\r\nWhen the update is done, this maintenance message will automatically be resolved.' --component "${{ secrets.STATUSPAGE_COMPONENT_ID }}" --start $(date --date='1 minute' --iso-8601=seconds) --end $(date --date='10 minutes' --iso-8601=seconds) --incident-status "in_progress" --api-key "${{ secrets.STATUSPAGE_API_KEY }}" --page-id "${{ secrets.STATUSPAGE_PAGE_ID }}"

      - name: get current timestamp
        id: deployment-id
        run: echo "::set-output name=DEPLOYMENT_ID::$(date +%s)"
      
      - name: create new folder with current timestamp
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            mkdir "${{ secrets.BASE_PATH }}${{ secrets.DEPLOYMENTS_FOLDER }}/${{ steps.deployment-id.outputs.DEPLOYMENT_ID }}"
            cp "${{ secrets.BASE_PATH }}${{ secrets.DEPLOYMENTS_FOLDER }}/.env" "${{ secrets.BASE_PATH }}${{ secrets.DEPLOYMENTS_FOLDER }}/${{ steps.deployment-id.outputs.DEPLOYMENT_ID }}/.env"
      
      - name: upload to new folder
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SOURCE: src/
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: "${{ secrets.BASE_PATH }}${{ secrets.DEPLOYMENTS_FOLDER }}/${{ steps.deployment-id.outputs.DEPLOYMENT_ID }}"
          EXCLUDE: "/sql/, .env.example, README.md"
      
      - name: Install composer packages, link to staging env and test on staging
        id: testing
        uses: appleboy/ssh-action@master
        with: 
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.BASE_PATH }}
            ln -s "${{ secrets.DEPLOYMENTS_FOLDER }}/${{ steps.deployment-id.outputs.DEPLOYMENT_ID }}" staging
            cd "${{ secrets.BASE_PATH }}${{ secrets.DEPLOYMENTS_FOLDER }}/${{ steps.deployment-id.outputs.DEPLOYMENT_ID }}"
            sed -i 's/http:\/\/localhost/https:\/\/staging.api.sso.isleoflan.ch/g' codeception.yml
            openssl genrsa -out intermediatePrivate.pem 4096
            openssl rsa -in intermediatePrivate.pem -outform PEM -pubout -out intermediatePublic.pem
            openssl genrsa -out authPrivate.pem 4096
            openssl rsa -in authPrivate.pem -outform PEM -pubout -out authPublic.pem
            chmod 0755 *.pem
            composer install
            ${{ secrets.BASE_PATH }}${{ secrets.DEPLOYMENTS_FOLDER }}/${{ steps.deployment-id.outputs.DEPLOYMENT_ID }}/vendor/bin/codecept run tests -vv
      
      - name: if tests successful, update symlink of live and remove staging link, restart consumer
        if: success()
        uses: appleboy/ssh-action@master
        with: 
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.BASE_PATH }}
            cd staging
            rm -rf tests
            rm -rf vendor
            rm codeception.yml
            rm *.pem
            composer install --no-dev
            cd ..
            rm "${{ secrets.BASE_PATH }}live"
            rm "${{ secrets.BASE_PATH }}staging"
            ln -s "${{ secrets.DEPLOYMENTS_FOLDER }}/${{ steps.deployment-id.outputs.DEPLOYMENT_ID }}" live
            cd live
            date +"%V.%u-%k%M" > classes/IOL/SSO/v1/VERSION.vsf
            cp ${{ secrets.BASE_PATH }}${{ secrets.DEPLOYMENTS_FOLDER }}/*.pem .
      
      
      - name: end maintenance mode
        if: always()
        run: |
          php vendor/bin/statuspage.php maintenance update --incident "${{ steps.statuspage.outputs.INCIDENT_ID }}" --description "The update has been completed. Thank you for your patience and sorry for the possible inconveniences. The SSO API is now running again as intended" --incident-status "completed" --api-key "${{ secrets.STATUSPAGE_API_KEY }}" --page-id "${{ secrets.STATUSPAGE_PAGE_ID }}"
      
      
